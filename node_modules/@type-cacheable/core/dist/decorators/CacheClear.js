"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheClear = void 0;
const util_1 = require("../util");
const index_1 = require("../index");
const DefaultClearStrategy_1 = require("../strategies/DefaultClearStrategy");
/**
 * CacheClear - This decorator allows you to clear a key in
 *
 * @param options {CacheOptions}
 */
function CacheClear(options) {
    return (target, propertyKey, descriptor) => {
        const originalMethod = descriptor === null || descriptor === void 0 ? void 0 : descriptor.value;
        return Object.assign(Object.assign({}, descriptor), { value: function (...args) {
                return __awaiter(this, void 0, void 0, function* () {
                    // Allow a client to be passed in directly for granularity, else use the connected
                    // client from the main CacheManager singleton.
                    const client = options && options.client ? options.client : index_1.default.client;
                    const fallbackClient = options && options.fallbackClient ? options.fallbackClient : index_1.default.fallbackClient;
                    if (options && options.noop && (0, util_1.determineOp)(options.noop, args, this)) {
                        return originalMethod === null || originalMethod === void 0 ? void 0 : originalMethod.apply(this, args);
                    }
                    // If there is no client, no-op is enabled (else we would have thrown before),
                    // just return the result of the decorated method (no caching)
                    if (!client) {
                        // A caching client must exist if not set to noop, otherwise this library is doing nothing.
                        if (index_1.default.options.debug) {
                            console.warn('type-cacheable @CacheClear was not set up with a caching client. Without a client, type-cacheable is not serving a purpose.');
                        }
                        return originalMethod === null || originalMethod === void 0 ? void 0 : originalMethod.apply(this, args);
                    }
                    // Run the decorated method
                    const result = yield (originalMethod === null || originalMethod === void 0 ? void 0 : originalMethod.apply(this, args));
                    try {
                        const contextToUse = !index_1.default.options.excludeContext ? this : undefined;
                        const finalKey = (0, util_1.getFinalKey)(options && options.cacheKey, options && options.hashKey, propertyKey, args, contextToUse);
                        const clearHash = (options === null || options === void 0 ? void 0 : options.hashKey) && !(options === null || options === void 0 ? void 0 : options.cacheKey);
                        const strategy = (0, util_1.getCacheClearStrategy)((options === null || options === void 0 ? void 0 : options.strategy) || index_1.default.options.clearStrategy || new DefaultClearStrategy_1.DefaultClearStrategy(), args, contextToUse);
                        yield strategy.handle({
                            debug: index_1.default.options.debug,
                            originalMethod,
                            originalPropertyKey: propertyKey,
                            originalMethodScope: this,
                            originalMethodArgs: args,
                            client,
                            fallbackClient,
                            key: finalKey,
                            isPattern: options === null || options === void 0 ? void 0 : options.isPattern,
                            hashesToClear: clearHash
                                ? (0, util_1.extractKey)(options === null || options === void 0 ? void 0 : options.hashKey, args, contextToUse)
                                : undefined,
                        });
                    }
                    catch (err) {
                        if (index_1.default.options.debug) {
                            console.warn(`type-cacheable CacheClear failed to clear cached on method ${propertyKey} value: ${err.message}`);
                        }
                    }
                    return result;
                });
            } });
    };
}
exports.CacheClear = CacheClear;
//# sourceMappingURL=CacheClear.js.map